
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from datetime import datetime

def LV_model(y,t, params):
    R,S,A = y #Different populations in the model- Resistant, sensitive and antibiotic
    r_R, r_S, K_R, K_S, alpha_RS, alpha_SR, beta_R, beta_S, mu, delta_A = params
    
#Parameters of the equation:
    #r_R, the growth rate of the resistant population
    #r_S, the growth rate of the sensitive population
    #K_R, the carrying capacity of the resistant population
    #K_S, the carrying capacity of the sensitive population
    #alpha_RS, the competition coefficient representing the effect of the sensitive population on the growth rate of the resistance population
    #alpha_SR, The competition coefficient representing the effect of the resistant population on the growth rate of the sensitive population
    #alpha_R, the effectiveness of the antibiotic against the resistant population
    #alpha_S, the effectiveness of the antibiotic againsts the sensitive pop.
    #mu, the mutation or acquisition rate at which sensitive bacteria become resistant
    #delta_A, the degradation rate of the antibiotic concentration over time
    
# The collection of nonlinear equation of the model
    
    dRdt = r_R * R * (1 - (R + alpha_RS * S) / K_R) - beta_R * A * R
    dSdt = r_S * S * (1 -(S + alpha_SR * R) / K_S) - beta_S * A * S + mu * S
    dAdt = -delta_A * A
    return [dRdt, dSdt, dAdt]

#The values of the parameters stated above
params = [0.1, 0.12, 1000, 800, 0.01, 0.01, 0.01, 0.1, 0.001, 0.02]

#y values at time 0. Y represents the initial population of each group
y0 = [200, 500, 50]

#Time intervals 
t = np.linspace(0, 100, 1000)

#Section responsible for resolving the ODEs above which is defined as LV_module, over the time array t , starting from the intitial y0 codnitions and using params all listed above.
# Arg passess extra parametres to LV_model

solution = odeint(LV_model, y0, t, args = (params,))

#Creates the figure with axes, axes limit, labels and legend
fig, ax = plt.subplots()
line1, = ax.plot([], [], 'g-', label='Resistant Bacteria population')
line2, = ax.plot([], [], 'b-', label='Sensitive Bacteria population')
line3, = ax.plot([], [], 'r--', label='Antibiotic Concentration')
ax.set_xlim(0, 100)
ax.set_ylim(0, max(np.max(solution[:,0]), np.max(solution[:,1])) * 1.1)
ax.set_xlabel('Time')
ax.set_ylabel('Population / Concentration')
ax.legend()

# Sets up
def init():
    line1.set_data([], [])
    line2.set_data([], [])
    line3.set_data([], [])
    return line1, line2, line3,

# Animation function: this is called sequentially
def animate(i):
    x = t[:i]
    y1 = solution[:i, 0]
    y2 = solution[:i, 1]
    y3 = solution[:i, 2]
    line1.set_data(x, y1)
    line2.set_data(x, y2)
    line3.set_data(x, y3)
    return line1, line2, line3

# This sectionis responsible for generating the GIF of the plot made of x intervals
ani = FuncAnimation(fig, animate, init_func=init, frames=len(t), interval=20, blit=True)

ani = FuncAnimation(fig, animate, init_func=init, frames=len(t), interval=20, blit=True)

# Saves the animation as a GIF-used the pillow writer for saving, I picked this one because it does not require downloading any extra mediaplayers
ani.save('bacterial_dynamics.gif', writer='pillow', fps=20)

# Generates a unique timestamp
timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")

# Use the timestamp in the filename
filename = f'bacterial_dynamics_{timestamp}.gif'

# Save the animation with the unique filename
ani.save(filename, writer='pillow', fps=20)
